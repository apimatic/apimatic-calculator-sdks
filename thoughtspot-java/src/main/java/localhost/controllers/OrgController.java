/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost.ApiHelper;
import localhost.AuthManager;
import localhost.Configuration;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.Headers;
import localhost.http.client.HttpCallback;
import localhost.http.client.HttpClient;
import localhost.http.client.HttpContext;
import localhost.http.request.HttpRequest;
import localhost.http.response.HttpResponse;
import localhost.http.response.HttpStringResponse;
import localhost.models.OrgsResponse;
import localhost.models.TspublicRestV2OrgCreateRequest;
import localhost.models.TspublicRestV2OrgSearchRequest;
import localhost.models.TspublicRestV2OrgUpdateRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OrgController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public OrgController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public OrgController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To get
     * the details of a specific organization by name or id, use this endpoint. At least one value
     * needed. When both are given,then id will be considered to fetch organization information.
     * Requires Administration privilege for tenant.
     * @param  name  Optional parameter: Name of the organization.
     * @param  id  Optional parameter: The ID of the organization.
     * @return    Returns the OrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsResponse getOrg(
            final String name,
            final String id) throws ApiException, IOException {
        HttpRequest request = buildGetOrgRequest(name, id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOrgResponse(context);
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To get
     * the details of a specific organization by name or id, use this endpoint. At least one value
     * needed. When both are given,then id will be considered to fetch organization information.
     * Requires Administration privilege for tenant.
     * @param  name  Optional parameter: Name of the organization.
     * @param  id  Optional parameter: The ID of the organization.
     * @return    Returns the OrgsResponse response from the API call
     */
    public CompletableFuture<OrgsResponse> getOrgAsync(
            final String name,
            final String id) {
        return makeHttpCallAsync(() -> buildGetOrgRequest(name, id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetOrgResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOrg.
     */
    private HttpRequest buildGetOrgRequest(
            final String name,
            final String id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/org");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("name", name);
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOrg.
     * @return An object of type OrgsResponse
     */
    private OrgsResponse handleGetOrgResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OrgsResponse result = ApiHelper.deserialize(responseBody,
                OrgsResponse.class);

        return result;
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To
     * programmatically create an organization in the ThoughtSpot system, use this API endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsResponse createOrg(
            final TspublicRestV2OrgCreateRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateOrgRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateOrgResponse(context);
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To
     * programmatically create an organization in the ThoughtSpot system, use this API endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsResponse response from the API call
     */
    public CompletableFuture<OrgsResponse> createOrgAsync(
            final TspublicRestV2OrgCreateRequest body) {
        return makeHttpCallAsync(() -> buildCreateOrgRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateOrgResponse(context));
    }

    /**
     * Builds the HttpRequest object for createOrg.
     */
    private HttpRequest buildCreateOrgRequest(
            final TspublicRestV2OrgCreateRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/org/create");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createOrg.
     * @return An object of type OrgsResponse
     */
    private OrgsResponse handleCreateOrgResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OrgsResponse result = ApiHelper.deserialize(responseBody,
                OrgsResponse.class);

        return result;
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. You
     * can use this endpoint to programmatically modify an existing org. Provide name or id of the
     * organization to update the properties. When both id and name are given, then id will be
     * considered and name of the organization will be updated. Requires Administration privilege
     * for tenant.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsResponse updateOrg(
            final TspublicRestV2OrgUpdateRequest body) throws ApiException, IOException {
        HttpRequest request = buildUpdateOrgRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateOrgResponse(context);
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. You
     * can use this endpoint to programmatically modify an existing org. Provide name or id of the
     * organization to update the properties. When both id and name are given, then id will be
     * considered and name of the organization will be updated. Requires Administration privilege
     * for tenant.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsResponse response from the API call
     */
    public CompletableFuture<OrgsResponse> updateOrgAsync(
            final TspublicRestV2OrgUpdateRequest body) {
        return makeHttpCallAsync(() -> buildUpdateOrgRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateOrgResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateOrg.
     */
    private HttpRequest buildUpdateOrgRequest(
            final TspublicRestV2OrgUpdateRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/org/update");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateOrg.
     * @return An object of type OrgsResponse
     */
    private OrgsResponse handleUpdateOrgResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OrgsResponse result = ApiHelper.deserialize(responseBody,
                OrgsResponse.class);

        return result;
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To
     * remove an organization from the ThoughtSpot system, send a DELETE request to this endpoint.
     * At least one value is needed. When both id and name are given, then id will be considered.
     * Requires Administration privilege for tenant.
     * @param  name  Optional parameter: Name of the organization.
     * @param  id  Optional parameter: The ID of the organization.
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean deleteOrg(
            final String name,
            final String id) throws ApiException, IOException {
        HttpRequest request = buildDeleteOrgRequest(name, id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteOrgResponse(context);
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To
     * remove an organization from the ThoughtSpot system, send a DELETE request to this endpoint.
     * At least one value is needed. When both id and name are given, then id will be considered.
     * Requires Administration privilege for tenant.
     * @param  name  Optional parameter: Name of the organization.
     * @param  id  Optional parameter: The ID of the organization.
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> deleteOrgAsync(
            final String name,
            final String id) {
        return makeHttpCallAsync(() -> buildDeleteOrgRequest(name, id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteOrgResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteOrg.
     */
    private HttpRequest buildDeleteOrgRequest(
            final String name,
            final String id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/org/delete");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("name", name);
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteOrg.
     * @return An object of type boolean
     */
    private Boolean handleDeleteOrgResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        boolean result = Boolean.parseBoolean(responseBody);

        return result;
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To get
     * the details of a specific organization or all organizations in the ThoughtSpot system use
     * this end point. If no input is provided, then all organizations are included in the response.
     * Requires Administration privilege for tenant.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of OrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrgsResponse> searchOrgs(
            final TspublicRestV2OrgSearchRequest body) throws ApiException, IOException {
        HttpRequest request = buildSearchOrgsRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSearchOrgsResponse(context);
    }

    /**
     * This is endpoint is applicable only if organization feature is enabled in the cluster. To get
     * the details of a specific organization or all organizations in the ThoughtSpot system use
     * this end point. If no input is provided, then all organizations are included in the response.
     * Requires Administration privilege for tenant.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of OrgsResponse response from the API call
     */
    public CompletableFuture<List<OrgsResponse>> searchOrgsAsync(
            final TspublicRestV2OrgSearchRequest body) {
        return makeHttpCallAsync(() -> buildSearchOrgsRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleSearchOrgsResponse(context));
    }

    /**
     * Builds the HttpRequest object for searchOrgs.
     */
    private HttpRequest buildSearchOrgsRequest(
            final TspublicRestV2OrgSearchRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/org/search");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for searchOrgs.
     * @return An object of type List of OrgsResponse
     */
    private List<OrgsResponse> handleSearchOrgsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<OrgsResponse> result = ApiHelper.deserializeArray(responseBody,
                OrgsResponse[].class);
        return result;
    }

}